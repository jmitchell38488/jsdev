{"version":3,"sources":["webpack:///./src/hooks/static/getPostsStatic.js","webpack:///./src/components/sidebar/renderSidebarTags.js","webpack:///./src/components/layout/sidebarRecent.js","webpack:///./src/utils/mapPostsToTags.js","webpack:///./src/utils/mapTagDetailsToPostsTagsMap.js","webpack:///./src/components/layout.js","webpack:///./src/components/postRollAll.js","webpack:///./src/pages/index.js"],"names":["useGetPostsStatic","limit","list","useStaticQuery","allMarkdownRemark","nodes","map","node","id","ttr","timeToRead","slug","fields","authors","frontmatter","date","publishedDate","hero","childImageSharp","fluid","src","tags","posttags","title","slice","length","RenderSidebarTags","tagMap","posts","tag","details","className","to","aria-label","post","ariaTitle","join","key","SidebarRecent","postTagMap","forEach","hasOwnProperty","push","keys","Object","MapPostsToTags","tagDetails","useGetPostTagDetailsStatic","tagsMap","all","includes","toArray","data","MapTagDetailstoPostsTagsMap","Layout","sidebarTag","children","PostRollAll","offset","logo","useGetSiteLogoSrcStatic","postList","index","pageQuery","BlogIndex","location","siteTitle","site","siteMetadata"],"mappings":"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","file":"component---src-pages-index-js-ed76493d85cf97d51ebe.js","sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\" \n\nexport const useGetPostsStatic = (limit = 0) => {\n  const result = useStaticQuery(graphql`\n    query useGetPostsStatic {\n      allMarkdownRemark(sort: {fields: [frontmatter___date], order: DESC}, limit: 1000) {\n        nodes {\n          id\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            publishedDate(formatString: \"MMMM DD, YYYY\")\n            title\n            authors\n            posttags\n            hero {\n              childImageSharp {\n                fluid {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const list = result.allMarkdownRemark.nodes\n    .map(node => ({\n      id: node.id,\n      ttr: node.timeToRead,\n      slug: node.fields.slug,\n      authors: node.frontmatter.authors,\n      date: node.frontmatter.date,\n      publishedDate: node.frontmatter.publishedDate,\n      hero: node.frontmatter.hero ? node.frontmatter.hero.childImageSharp.fluid.src : null,\n      tags: node.frontmatter.posttags,\n      title: node.frontmatter.title\n    }));\n\n    if (limit > 0) {\n      return list.slice(0, limit > list.length ? list.length : limit);\n    }\n\n    return list;\n}\n\nexport default useGetPostsStatic;","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst RenderSidebarTags = ({ tagMap }) => {\n  const { posts, details: tag } = tagMap;\n  return (\n    <section className=\"jsd-card jsd-card-secondary\">\n      <header className=\"jsd-card-header\">\n        <h3 className=\"jsd-card-header-headline\">\n          <Link to={tag.slug} title={tag.title} aria-label={tag.title}>#{tag.id}</Link>\n        </h3>\n      </header>\n      <div>\n        {posts.map(post => {\n          const ariaTitle = `${post.title} - by ${post.authors.join(\" and \")} - published ${post.publishedDate}`;\n          return <Link key={`sidebar-post-${post.id}`} to={post.slug} title={ariaTitle} aria-label={ariaTitle} className=\"jsd-link jsd-link-contentful fs-s l:fs-base\">{post.title}</Link>\n        })}\n      </div>\n    </section>\n  )\n}\n\nexport default RenderSidebarTags;\n","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport useGetPostsStatic from \"../../hooks/static/getPostsStatic\";\nimport useGetPostTagDetailsStatic from \"../../hooks/static/getPostTagDetailsStatic\";\nimport { MapPostsToTags } from \"../../utils/mapPostsToTags\";\nimport { MapTagDetailstoPostsTagsMap } from \"../../utils/mapTagDetailsToPostsTagsMap\";\nimport RenderSidebarTags from \"../sidebar/renderSidebarTags\";\n\nconst SidebarRecent = () => {\n  const posts = useGetPostsStatic(25);\n  const postTagMap = MapPostsToTags(posts);\n  const tagDetails = useGetPostTagDetailsStatic(postTagMap.keys());\n  const tagsPosts = MapTagDetailstoPostsTagsMap(postTagMap, tagDetails);\n\n  const list = tagsPosts\n    .toArray()\n    .map(node => <RenderSidebarTags key={`sidebar-tag-group-${node.details.id}`} tagMap={node} />)\n\n  return (\n    <aside className=\"side-bar sidebar-additional grid gap-4\" aria-label=\"Secondary sidebar\">\n      { list}\n    </aside>\n  )\n}\n\nexport default SidebarRecent;","export const MapPostsToTags = (posts) => {\n  const tags = {};\n  posts.forEach(post => {\n    const tag = post.tags[0];\n    if (!tags.hasOwnProperty(tag)) {\n      tags[tag] = {\n        posts: []\n      }\n    }\n\n    tags[tag].posts.push(post);\n  });\n\n  return {\n    map: () => tags,\n    keys: () => Object.keys(tags)\n  }\n}","export const MapTagDetailstoPostsTagsMap = (tagsMap, tagDetails) => {\n  const map = tagsMap.map();\n  const keys = tagsMap.keys();\n\n  tagDetails\n    .all()\n    .forEach(tag => {\n      if (keys.includes(tag.id)) {\n        map[tag.id].details = tag;\n      }\n    })\n\n  return {\n    toArray: () => tagsMap.keys().map(key => map[key]),\n    data: { ...tagsMap.map() }\n  };\n}","import React from \"react\"\nimport HeaderBar from \"./layout/headerBar\"\nimport SidebarRecent from \"./layout/sidebarRecent\"\nimport SidebarTags from \"./layout/sidebarTags\"\nimport SiteFooter from \"./siteFooter\";\n\nconst Layout = ({ sidebarTag, children }) => {\n\n  return (\n    <div className=\"site-container\">\n      <header>\n        <HeaderBar />\n      </header>\n      <div id=\"page-content\" className=\"universal-page-content-wrapper\">\n        <div id=\"page-content-inner\">\n          <div className=\"jsd-layout jsd-layout-3-cols jsd-layout-3-cols-drop-right-left\" id=\"index-container\">\n            <div id=\"sidebar-wrapper-left\" className=\"sidebar-wrapper sidebar-wrapper-left jsd-layout-sidebar-left\">\n              <SidebarTags sidebarTag={sidebarTag} />\n            </div>\n            <main className=\"jsd-list-main\">\n              {children}\n            </main>\n            <div id=\"sidebar-wrapper-right\" className=\"sidebar-wrapper sidebar-wrapper-right jsd-layout-sidebar-right\">\n              <SidebarRecent />\n            </div>\n          </div>\n        </div>\n      </div>\n      <SiteFooter />\n    </div>\n  )\n}\n\nexport default Layout\n","import React from \"react\";\nimport PostRollArticle from \"./layout/postRollArticle\";\nimport PostRollArticleHero from \"./layout/postRollArticleHero\";\nimport useGetPostsStatic from \"../hooks/static/getPostsStatic\";\nimport useGetSiteLogoSrcStatic from \"../hooks/static/getSiteLogoSrcStatic\";\n\nconst PostRollAll = ({ offset = 0, limit = 25 }) => {\n  const posts = useGetPostsStatic();\n  const logo = useGetSiteLogoSrcStatic();\n  const postList = posts.map((node, index) => {\n    const { hero, ...data } = node;\n    data.hero = null;\n    if (index === 0) {\n      data.hero = hero ? hero : (logo ? logo : null);\n      return <PostRollArticleHero key={`${data.id}`} post={data} title={data.title} />;\n    }\n    return <PostRollArticle key={`${data.id}`} post={data} title={data.title} />;\n  })\n\n  return (\n    <div id=\"rendered-article-feed\">\n      { postList}\n    </div>\n  )\n};\n\nexport default PostRollAll;","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostRollAll from \"../components/postRollAll\";\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO location={location}/>\n      <header className=\"mb-2\">\n        <h2 className=\"fs-m fw-heavy m-0 ff-monospace\">Posts</h2>\n      </header>\n      <div id=\"homepage-feed\">\n        <PostRollAll />\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}