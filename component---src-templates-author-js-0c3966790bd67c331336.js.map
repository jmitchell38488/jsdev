{"version":3,"sources":["webpack:///./src/components/layoutAuthor.js","webpack:///./src/hooks/static/getPostsByAuthorIdStatic.js","webpack:///./src/components/postRollByAuthorId.js","webpack:///./src/templates/author.js","webpack:///./src/components/avatar.js","webpack:///./src/components/sidebar/renderSidebarAuthorBioParts.js","webpack:///./src/components/sidebar/renderSidebarAuthorDetails.js","webpack:///./src/components/layout/sidebarAuthor.js"],"names":["LayoutAuthor","authorId","children","post","frontmatter","authors","className","id","useGetPostsByAuthorIdStatic","useStaticQuery","allMarkdownRemark","nodes","filter","node","includes","map","ttr","timeToRead","slug","fields","date","publishedDate","hero","childImageSharp","fluid","src","tags","posttags","title","PostRollByAuthorId","posts","logo","useGetSiteLogoSrcStatic","postList","index","data","key","pageQuery","AuthorTemplate","pageContext","location","author","siteTitle","site","siteMetadata","authorDetails","useGetAuthorDetailsStatic","first","name","twitterCreator","Avatar","strClass","alt","loading","RenderSidebarAuthorBioParts","listItems","employment","position","company","push","value","url","href","target","rel","item","RenderSidebarAuthorDetails","to","aria-label","profilePicture","bio","SidebarAuthor","authorList","all"],"mappings":"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","file":"component---src-templates-author-js-0c3966790bd67c331336.js","sourcesContent":["import React from \"react\"\nimport HeaderBar from \"./layout/headerBar\"\nimport SidebarAuthor from \"./layout/sidebarAuthor\"\nimport SidebarTags from \"./layout/sidebarTags\"\nimport SiteFooter from \"./siteFooter\";\n\nconst LayoutAuthor = ({ authorId, children }) => {\n  const post = {\n    frontmatter: {\n      authors: [authorId]\n    }\n  }\n\n  return (\n    <div className=\"site-container\">\n      <header>\n        <HeaderBar />\n      </header>\n      <div id=\"page-content\" className=\"universal-page-content-wrapper\">\n        <div id=\"page-content-inner\">\n          <div className=\"jsd-layout jsd-layout-3-cols jsd-layout-3-cols-drop-right-left\" id=\"index-container\">\n            <div id=\"sidebar-wrapper-left\" className=\"sidebar-wrapper sidebar-wrapper-left jsd-layout-sidebar-left\">\n              <SidebarTags />\n            </div>\n            <main>\n              {children}\n            </main>\n            <div id=\"sidebar-wrapper-right\" className=\"sidebar-wrapper sidebar-wrapper-right jsd-layout-sidebar-right\">\n              <SidebarAuthor post={post} />\n            </div>\n          </div>\n        </div>\n      </div>\n      <SiteFooter />\n    </div>\n  )\n}\n\nexport default LayoutAuthor\n","import { graphql, useStaticQuery } from \"gatsby\" \n\nconst useGetPostsByAuthorIdStatic = (authorId) => {\n  const result = useStaticQuery(graphql`\n    query useGetPostsByAuthorIdStatic {\n      allMarkdownRemark(filter: {frontmatter: {published: {eq: true}}}, sort: {fields: [frontmatter___date], order: DESC}, limit: 1000) {\n        nodes {\n          id\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            authors\n            posttags\n            hero {\n              childImageSharp {\n                fluid {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return result.allMarkdownRemark.nodes\n    .filter(node => node.frontmatter.authors.includes(authorId))\n    .map(node => ({\n      id: node.id,\n      ttr: node.timeToRead,\n      slug: node.fields.slug,\n      authors: node.frontmatter.authors,\n      date: node.frontmatter.date,\n      publishedDate: node.frontmatter.publishedDate,\n      hero: node.frontmatter.hero ? node.frontmatter.hero.childImageSharp.fluid.src : null,\n      tags: node.frontmatter.posttags,\n      title: node.frontmatter.title\n    }));\n}\n\nexport default useGetPostsByAuthorIdStatic;","import React from \"react\";\nimport useGetPostsByAuthorIdStatic from \"../hooks/static/getPostsByAuthorIdStatic\";\nimport useGetSiteLogoSrcStatic from \"../hooks/static/getSiteLogoSrcStatic\";\nimport PostRollArticle from \"./layout/postRollArticle\";\nimport PostRollArticleHero from \"./layout/postRollArticleHero\";\n\nconst PostRollByAuthorId = ({ authorId }) => {\n  const posts = useGetPostsByAuthorIdStatic(authorId);\n  const logo = useGetSiteLogoSrcStatic();\n  const postList = posts\n  .map((node, index) => {\n    const { hero, ...data } = node;\n    data.hero = null;\n    if (index === 0) {\n      data.hero = hero ? hero : (logo ? logo : null);\n      return <PostRollArticleHero key={`${data.id}`} post={data} title={data.title} />;\n    }\n    return <PostRollArticle key={`${data.id}`} post={data} title={data.title} />;\n  })\n\n  return (\n    <div id=\"rendered-article-feed\">\n      {postList}\n    </div>\n  )\n};\n\nexport default PostRollByAuthorId;","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport LayoutAuthor from \"../components/layoutAuthor\"\nimport PostRollByAuthorId from \"../components/postRollByAuthorId\"\nimport SEO from \"../components/seo\"\nimport useGetAuthorDetailsStatic from \"../hooks/static/getAuthorDetailsStatic\"\nimport RenderSidebarAuthorDetails from \"../components/sidebar/renderSidebarAuthorDetails\"\n\nconst AuthorTemplate = ({ pageContext, data, location }) => {\n  const { author } = pageContext;\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const authorDetails = useGetAuthorDetailsStatic(author);\n\n  return (\n    <LayoutAuthor location={location} title={siteTitle} authorId={author}>\n      <SEO title={authorDetails.first().name} location={location} twitterCreator={authorDetails.first().id} />\n\n      <div className=\"hide show-tablet jsd-header-widget\">\n        <RenderSidebarAuthorDetails author={authorDetails.first()} />\n      </div>\n\n      <header className=\"mb-2\">\n        <h2 className=\"fs-m fw-heavy m-0 ff-monospace\">Posts</h2>\n      </header>\n      <div id=\"homepage-feed\">\n        <PostRollByAuthorId authorId={author} />\n      </div>\n    </LayoutAuthor>\n  )\n}\n\nexport default AuthorTemplate;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n","import React from \"react\";\n\nconst Avatar = ({ name, src, className = \"\" }) => {\n  const strClass = className ? `jsd-avatar ${className}` : \"jsd-avatar\";\n  if (!src) {\n    return (\n      <span className={strClass}>\n        <span className=\"jsd-avatar-image\" alt={name} title={name} />\n      </span>\n    )\n  }\n  return (\n    <span className={strClass}>\n      <img className=\"jsd-avatar-image jsd-article-cover-image\" src={src} alt={name} title={name} loading=\"lazy\" />\n    </span>\n  )\n}\n\nexport default Avatar;\n","import React from \"react\";\n\nconst RenderSidebarAuthorBioParts = ({ author }) => {\n  const listItems = [];\n  if (author.employment?.position && author.employment?.company) {\n    listItems.push({\n      id: \"work\",\n      title: \"Work\",\n      value: (\n        <>\n          {author.employment?.position}\n          <span>at</span>\n          { author.employment?.url ? (<a className=\"jsd-link\" href={author.employment?.url} target=\"_blank\" title={author.employment?.company} rel=\"noreferrer\">{author.employment?.company}</a>) : author.employment?.company}\n        </>\n      )\n    })\n  }\n\n  if (author.location) {\n    listItems.push({\n      id: \"location\",\n      title: \"Location\",\n      value: author.location\n    });\n  }\n\n  return (\n    <div className=\"jsd-author-details\">\n      <ul className=\"jsd-author-details-inner\">\n        {listItems.map(item => (\n          <li key={item.id}>\n            <div className=\"key\">{item.title}</div>\n            <div className=\"value\">{item.value}</div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default RenderSidebarAuthorBioParts;","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport Avatar from \"../avatar\";\nimport RenderSidebarAuthorBioParts from \"./renderSidebarAuthorBioParts\";\n\nconst RenderSidebarAuthorDetails = ({ author }) => {\n  return (\n    <section className=\"jsd-card jsd-card-secondary branded p-4 pt-0 hidden l:grid gap-4\">\n      <div className=\"-mt-4\">\n        <Link to={author.slug} className=\"flex jsd-link\" title={author.name} aria-label={author.name}>\n          <Avatar name={author.name} src={author.profilePicture.src} className=\"jsd-avatar-xl mr-2 shrink-0\"/>\n          <span className=\"fs-m fw-med mt-5\">{author.name}</span>\n        </Link>\n      </div>\n      <div className=\"jsd-author-bio\">{author.bio}</div>\n      <RenderSidebarAuthorBioParts author={author} />\n    </section>\n  )\n}\n\nexport default RenderSidebarAuthorDetails;\n","import React from \"react\";\nimport useGetAuthorDetailsStatic from \"../../hooks/static/getAuthorDetailsStatic\";\nimport RenderSidebarAuthorDetails from \"../sidebar/renderSidebarAuthorDetails\";\n\nconst SidebarAuthor = ({ post }) => {\n  const authors = useGetAuthorDetailsStatic(post.frontmatter.authors);\n  const authorList = authors\n    .all()\n    .map(node => <RenderSidebarAuthorDetails key={`sidebar-author-${node.id}`} author={node} />)\n\n  return (\n    <aside className=\"side-bar sidebar-additional grid gap-4\" aria-label=\"Secondary sidebar\">\n      {authorList}\n    </aside>\n  )\n}\n\nexport default SidebarAuthor;"],"sourceRoot":""}