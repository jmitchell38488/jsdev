{"componentChunkName":"component---src-templates-blog-post-js","path":"/jmitchell/const-let-var-javascript-variables-and-immutability-a6c","result":{"data":{"site":{"siteMetadata":{"title":"JS.dev Community üë®üèº‚ÄçüíªüöÄüéì"}},"allMarkdownRemark":{"nodes":[{"id":"a81aa843-a67e-5d78-9f62-69e56984800b","timeToRead":5,"fields":{"slug":"/jmitchell/const-let-var-javascript-variables-and-immutability-a6c"},"html":"<p>The release of ES2015 in 2015 introduced two new keywords, <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>, which are important <a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)\">block-scoped</a> variables in JavaScript. Until that point, for close to two decades, a variable was declared in JavaScript by using the <code class=\"language-text\">var</code> keyword.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, world!\"</span></code></pre></div>\n<h3>So, what‚Äôs the difference?</h3>\n<p>The three keywords together provide the same fundamental functionality, but differ in the way that they provide it. <code class=\"language-text\">var</code> and <code class=\"language-text\">let</code> are <strong>reassignable</strong> values, while <code class=\"language-text\">const</code> has limited <em>mutability</em>. </p>\n<p><code class=\"language-text\">var</code> and <code class=\"language-text\">let</code> can be reassigned - which is the act of setting a value at one point in time, and then using the same variable reference and giving it a new value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ... do something</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fruit <span class=\"token operator\">=</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The same can be achieved with <code class=\"language-text\">let</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fruit <span class=\"token operator\">=</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ... do something</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  fruit <span class=\"token operator\">=</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, <code class=\"language-text\">const</code> does not allow reassignment of the reference, nor does it allow the mutation of a primitive. A <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitive</a> is a one of six types; a string, boolean, number, bigint, undefined and symbol, while <code class=\"language-text\">null</code> is a special type of object.</p>\n<p>All primitives are <strong>immutable</strong>, meaning that their values cannot be changed, but they can be assigned a new value. This is different to stricter and strongly typed languages, where a primitive can mutable because of the way the language works.</p>\n<p>Variable mutation through reassignment:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"Bar\"</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token string\">\"something else\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can however, mutate an object that declared as a <code class=\"language-text\">const</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Foo is now [ \"Apple\", \"Orange\" ]</span></code></pre></div>\n<p>What you can‚Äôt do, is set a new value on a previously declared <code class=\"language-text\">const</code> by <strong>reassignment</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught TypeError: Assignment to constant variable. </span></code></pre></div>\n<h4>Why you shouldn‚Äôt use <code class=\"language-text\">var</code></h4>\n<p><code class=\"language-text\">let</code>, <code class=\"language-text\">var</code> and <code class=\"language-text\">const</code> behave in the same way in scope, other than the limited mutability for <code class=\"language-text\">const</code>. It is recommended however, to make it clear as to behaviour and treatment of a given property and its value, that you declare <strong>mutable</strong> variables as <code class=\"language-text\">let</code> and <strong>immutable</strong> variables as <code class=\"language-text\">const</code>.</p>\n<p><code class=\"language-text\">var</code> can still be used, but the treatment around <code class=\"language-text\">var</code> is far more flexible than <code class=\"language-text\">let</code>. For example, using a <code class=\"language-text\">var</code>, you can do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// x will have value of \"2\"</span></code></pre></div>\n<p>Doing the same with <code class=\"language-text\">let</code> will throw an error, indicating the the variable has already been declared within the scope of execution</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'x' has already been declared </span></code></pre></div>\n<h3>What‚Äôs the difference with variable scope?</h3>\n<p><code class=\"language-text\">var</code> is a tricky one to deal with, because even with block-scoped execution, that is an <code class=\"language-text\">if</code>-<code class=\"language-text\">else</code> statement, a <code class=\"language-text\">while</code> loop, or anything executed between curly braces <code class=\"language-text\">{}</code>, <code class=\"language-text\">var</code> doesn‚Äôt adhere to expected declaration rules, which is that anything declared in a scope, lives in that scope.</p>\n<p>For example, this is possible, because when a <code class=\"language-text\">var</code> is declared outside of a function scope, it will mutate the parent scope, which in a lot of cases, is the window:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> t <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prints \"foo\" to the console</span></code></pre></div>\n<p>By using <code class=\"language-text\">var</code> inside of a function, the declaration is block limited:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> fooT <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>fooT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// prints \"undefined\" to the console</span></code></pre></div>\n<p>This is where <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> come in, because they are correctly block scoped, thereby adhering to the rules of declaration within a function scope, conditional block scope or loop scope. </p>\n<p>Importantly, they also <em>don‚Äôt</em> modify the parent scope:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fooBar <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>fooBar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// prints \"undefined\" to the console</span></code></pre></div>\n<h3>What about using <code class=\"language-text\">var</code> or <code class=\"language-text\">let</code> in a for loop?</h3>\n<p>There are multiple ways to iterate through a collection of objects in JavaScript, with while and <a href=\"https://www.w3schools.com/js/js_loop_for.asp\">for</a> being to primary ways.</p>\n<p>Below are several ways to iterate through an array collection using <code class=\"language-text\">for</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// for: i is the index</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> collection<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> collection<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// for...in: x is the index</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token keyword\">in</span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> collection<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// for...of: x is the value</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> x <span class=\"token keyword\">of</span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> x <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The benefit of using <code class=\"language-text\">let</code> in a loop, is that <code class=\"language-text\">let</code> is block-scoped to the loop itself. That is to say, that you cannot consume the declaration of <code class=\"language-text\">let</code> outside of the block that it is declared in.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Using let</span>\n<span class=\"token keyword\">const</span> collection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> fruit <span class=\"token keyword\">of</span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I like to eat 1 \"</span> <span class=\"token operator\">+</span> fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught ReferenceError: fruit is not defined </span></code></pre></div>\n<p>However, when using <code class=\"language-text\">var</code>, you can still access the <code class=\"language-text\">fruit</code> variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Using let</span>\n<span class=\"token keyword\">const</span> collection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> fruit <span class=\"token keyword\">of</span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I like to eat 1 \"</span> <span class=\"token operator\">+</span> fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// prints \"orange\" to the console</span></code></pre></div>\n<p>There are ways around this, such as dropping the declaration of <code class=\"language-text\">var</code> inside block scopes, but this opens up another entire can of worms with readability, consistency and correct block scoping. </p>\n<p>The bigger issue at hand, is that even when dropping <code class=\"language-text\">var</code>, <code class=\"language-text\">let</code> or <code class=\"language-text\">const</code> in a loop, the variable is automatically declared as a <code class=\"language-text\">var</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> collection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> fruit <span class=\"token keyword\">of</span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I like to eat 1 \"</span> <span class=\"token operator\">+</span> fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// prints \"orange\" to the console</span></code></pre></div>\n<h4>I sort of understood some of those words‚Ä¶</h4>\n<p>To clarify the meaning of some of the words and terms used:</p>\n<ul>\n<li>mutate is to change, or modify a variable or property of an object, eg <code class=\"language-text\">let foo = 1; foo = 2;</code></li>\n<li>assignment is to set a value to a variable eg <code class=\"language-text\">let foo = 1;</code></li>\n<li>iterate is to traverse, or <em>navigate</em> from top-to-bottom (left to right) of an array or collection, starting with the first element and ending in the last element</li>\n<li>collection is a structured object that has n elements, eg 1 or more elements, eg. <code class=\"language-text\">const foo = [ &quot;apple&quot;, &quot;orange&quot; ];</code></li>\n</ul>","excerpt":"The release of ES2015 in 2015 introduced two new keywords,  and , which are important block-scoped variables in JavaScript‚Ä¶","frontmatter":{"date":"August 01, 2020","publishedDate":"August 01, 2020","title":"const, let, var; JavaScript variables and immutability","authors":["jmitchell"],"posttags":["javascript","webdev","beginners","codenewbie"],"hero":{"childImageSharp":{"fluid":{"src":"/static/b668263e1e3fb97c959dd3cba072acf7/8c61a/hero.jpg"}}}}}]}},"pageContext":{"authors":["jmitchell"],"slug":"/jmitchell/const-let-var-javascript-variables-and-immutability-a6c","previous":{"id":"7a66e1d3-cbe7-52c5-8eec-107a5ceaed97","fields":{"slug":"/jmitchell/the-file-expertise-levels-of-a-software-developer-the-road-to-zen-master-9e7"},"timeToRead":6,"frontmatter":{"date":"01 Aug, 2020","publishedDate":"01 Aug, 2020","updatedDate":null,"title":"The five expertise levels of a software developer; the road to zen master","authors":["jmitchell"],"posttags":["leadership"],"uid":"7x8kfi8b9e7"}},"next":{"id":"67f019f3-2e5d-5e0f-945d-8962239dbe1e","fields":{"slug":"/jmitchell/what-is-hoisting-and-how-it-works-in-javascript-e1e"},"timeToRead":6,"frontmatter":{"date":"25 Sep, 2020","publishedDate":"25 Sep, 2020","updatedDate":null,"title":"What is hoisting and how it works in JavaScript","authors":["jmitchell"],"posttags":["javascript"],"uid":"7wlkfi8ae1e"}}}},"staticQueryHashes":["1790439409","2756842759","2801668113","3763906766","4266827661"]}