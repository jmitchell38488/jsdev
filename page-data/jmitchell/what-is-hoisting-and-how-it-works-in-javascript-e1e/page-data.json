{"componentChunkName":"component---src-templates-blog-post-js","path":"/jmitchell/what-is-hoisting-and-how-it-works-in-javascript-e1e","result":{"data":{"site":{"siteMetadata":{"title":"JS.dev Community üë®üèº‚ÄçüíªüöÄüéì"}},"allMarkdownRemark":{"nodes":[{"id":"f20f9899-4f11-5d25-b9bb-51a9bb00de92","timeToRead":6,"fields":{"slug":"/jmitchell/what-is-hoisting-and-how-it-works-in-javascript-e1e"},"html":"<p>The famed and often confusing term, certainly for any JavaScript developer, and it leaves many scratching their heads; what exactly is hoisting?</p>\n<p>Hoisting is a term that describes a mechanism in JavaScript to provide early-access to declarations.</p>\n<blockquote>\n<p>Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution.</p>\n</blockquote>\n<p>Ever wondered why in JavaScript you can interact with your variables and functions before they‚Äôve been declared? Then read on!</p>\n<h5 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tl;dr</h5>\n<p>Conceptually speaking, hoisting is the movement of declaractions - variables and functions - to the top of their scope, while assignments are left in place. What really happens, is that during compile time, the declarations are put into memory <em>first</em>, but physically remain in place in your code.</p>\n<p>The benefit of doing this is that you get access to functions and variables <em>before</em> they‚Äôre declared in code. This only applies to <em>declarations</em>, not to expressions, and not to initializing an undeclared variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It‚Äôs important to remember that <em>only</em> declarations are hoisted into memory during compile time, <em>not</em> assignments.</p>\n<h2 id=\"only-declarations-are-hoisted\" style=\"position:relative;\"><a href=\"#only-declarations-are-hoisted\" aria-label=\"only declarations are hoisted permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Only declarations are hoisted</h2>\n<p>JavaScript only hoists the declarations of functions and variables into memory during compile time, <em>not</em> the assignments. This means that if a variable is declared and initialized after using it, the value will be <code class=\"language-text\">undefined</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 'undefined' as only the _declaration_ was hoisted</span>\n<span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// declaration</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// initialization</span></code></pre></div>\n<p>The following is an example of initialization returning a <code class=\"language-text\">ReferenceError</code>. In this case, a variable is only initialized, not declared; in order to declare something to be hoisted in JavaScript, it must either be explicitly declared as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements\">var or function</a>, as implicit declaractions (initialization only) wont be hoisted.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'ReferenceError: foo is not defined'</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// only initialization, no declaration, value did not follow var</span></code></pre></div>\n<p>It‚Äôs important to remember that only the <em>declaration</em> is hoisted, even if a value is assigned.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'undefined'</span>\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"hoisting-variables\" style=\"position:relative;\"><a href=\"#hoisting-variables\" aria-label=\"hoisting variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hoisting variables</h3>\n<p>JavaScript allows us to declare and initialize our variables simultaneously. However, the engine separates the declaration and initialization of variables, and executes it as separate steps, thus allowing the engine to hoist declarations above initializations.</p>\n<p>All function and variable <em>declarations</em> are hoisted to the top of their scope, while variable declarations are processed ahead of function declarations; which is why you can call functions with yet-to-be-declared variables, and get an <code class=\"language-text\">undefined</code> error.</p>\n<p>However, there is a caveat. When <em>initializing</em> a variable, that hasn‚Äôt yet been declared yet, the variable is hoisted to the global scope when it is executed, rather than hoisted to its scope, like the function it‚Äôs being initialized in. This <em>only</em> happens on execution, not at compile time.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  doing <span class=\"token operator\">=</span> <span class=\"token string\">\"something\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: doing is not defined</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// something</span></code></pre></div>\n<p>This is distinctly different to scoped variable declarations, which only exist within their scope. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> doing <span class=\"token operator\">=</span> <span class=\"token string\">\"something\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: doing is not defined</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: doing is not defined</span></code></pre></div>\n<p>The take-away is, that <em>declared</em> variables are hoisted to the top of their scope at <strong>compiled time</strong>, while <em>undeclared</em> variables are hoised to the global scope <strong>during execution</strong>.</p>\n<h3 id=\"declarations-using-let-and-const-are-not-hoisted-to-global-space\" style=\"position:relative;\"><a href=\"#declarations-using-let-and-const-are-not-hoisted-to-global-space\" aria-label=\"declarations using let and const are not hoisted to global space permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declarations using <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> are not hoisted to global space</h3>\n<p><code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> were introduced in ES6 for scope-based operations, but unlike <code class=\"language-text\">var</code>, do not get hoisted to global space during compile time. Variables declared with <code class=\"language-text\">let</code> are block scoped and not function scoped. This is significant, because unlike <code class=\"language-text\">var</code>, there‚Äôs no risk of variable leakage outside of the scope of execution.</p>\n<p>The downside is that <code class=\"language-text\">const</code> and <code class=\"language-text\">let</code> do not get hoisted, in local or global scope. Read more about <a href=\"https://thejs.dev/jmitchell/const-let-var-javascript-variables-and-immutability-00b\">var, const and let</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'ReferenceError: foo is not defined'</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'ReferenceError: bar is not defined'</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"strict-mode-prevents-sloppy-hoisting\" style=\"position:relative;\"><a href=\"#strict-mode-prevents-sloppy-hoisting\" aria-label=\"strict mode prevents sloppy hoisting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strict mode prevents sloppy hoisting</h3>\n<p>Introduced as a utility in ES5, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict-mode</a> is a way to <em>opt in</em> to a restricted variant of JavaScript, implicitly opting-out of <a href=\"https://developer.mozilla.org/docs/Glossary/Sloppy_mode\">sloppy mode</a>. It introduces different semantics, such as eliminating some silent errors, improves some optimizations and prohibits some syntax, such as accessing variables before they‚Äôve been declared.</p>\n<p>You can opt-in to strict-mode by pre-facing your file, or function with <code class=\"language-text\">use strict</code> at the top of the scope, before any code is declared:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can test if we can access initializations ahead of time with strict-mode enabled:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  foo <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'ReferenceError: foo is not defined'</span></code></pre></div>\n<h3 id=\"not-all-functions-are-hoisted-alike\" style=\"position:relative;\"><a href=\"#not-all-functions-are-hoisted-alike\" aria-label=\"not all functions are hoisted alike permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Not all functions are hoisted alike</h3>\n<p>Function are classified as either function declarations, or function expressions. The important difference between the two, when discussing hoisting, is <em>declaration</em>. A declared function <em>will be hoisted</em>, while a function created through an expression <em>will not</em> be hoisted. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> hoistedFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'function'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> unhoistedFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'undefined'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hoistedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This function _will_ hoisted, because it is *declared* as a function</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">unhoistedFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// This function _will not_ be hoisted because it is declared through an expression of a variable, and therefore will be undefined </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"order-of-hoisting-precedence-matters\" style=\"position:relative;\"><a href=\"#order-of-hoisting-precedence-matters\" aria-label=\"order of hoisting precedence matters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Order of hoisting precedence matters</h3>\n<p>There are two rules you have to keep in mind when working with hoisted functions and variables:</p>\n<ol>\n<li>Function declaration takes precedence over variable declarations</li>\n<li>Variable assignment takes precedence over expression function </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'undefined'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'function'</span>\n<span class=\"token keyword\">var</span> myVar <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// declaration and initialization</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// declaration</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints 'string'</span></code></pre></div>\n<p>We can take a deeper look at the steps during the compilation and execution cycle to see what‚Äôs happening with our declaration and initializations:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> myVar<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyVar <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"classes-are-not-hoisted\" style=\"position:relative;\"><a href=\"#classes-are-not-hoisted\" aria-label=\"classes are not hoisted permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Classes are not hoisted</h3>\n<p>Classes in JavaScript are in fact special functions, and just as you can define functions with declaration and expression, the class syntax has the same two components: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\">class expressions and class declarations</a>.</p>\n<p>Unlike functions and variables, classes <em>do not</em> get hoisted, either through declaration or expression. You need to declare your class before you can use it.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Rectangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>Let‚Äôs summarise what we‚Äôve learned:</p>\n<ol>\n<li>Hoisting is a mechanism that inserts variable and function declaractions into memory ahead of assignment and initialization within the given scope of execution</li>\n<li><code class=\"language-text\">const</code>, <code class=\"language-text\">let</code>, function expressions and classes <em>do not</em> get hoisted, and cannot be read or accessed before their declaration</li>\n<li><code class=\"language-text\">safe-mode</code> prevents sloppy hoisting of initialized undeclared variables onto the global scope</li>\n</ol>\n<p>To avoid hoisting confusion and issues in the longterm, it‚Äôs better to declare your variables and functions ahead of initialization and access. You‚Äôll avoid a whole set of potentially nasty bugs and <code class=\"language-text\">undefined</code> warnings polluting your console.</p>","excerpt":"The famed and often confusing term, certainly for any JavaScript developer, and it leaves many scratching their heads; what‚Ä¶","frontmatter":{"date":"September 25, 2020","publishedDate":"September 25, 2020","updatedDate":"September 26, 2020","published":true,"title":"What is hoisting and how it works in JavaScript","authors":["jmitchell"],"posttags":["javascript"],"hero":{"childImageSharp":{"fluid":{"src":"/static/805ce41923f98ef029a5a27c2d64707b/cc4ac/hero.png"}}}}}]}},"pageContext":{"authors":["jmitchell"],"slug":"/jmitchell/what-is-hoisting-and-how-it-works-in-javascript-e1e","previous":{"id":"9f9fdbdc-4cd9-5832-a83a-46da83a0cdd8","fields":{"slug":"/jmitchell/const-let-var-javascript-variables-and-immutability-a6c"},"timeToRead":5,"frontmatter":{"date":"01 Aug, 2020","publishedDate":"01 Aug, 2020","updatedDate":null,"title":"const, let, var; JavaScript variables and immutability","authors":["jmitchell"],"posttags":["javascript","webdev","beginners","codenewbie"],"uid":"7djkfi87a6c"}},"next":{"id":"59e854a6-f540-5675-8c47-4902ae1cc5be","fields":{"slug":"/jmitchell/what-are-side-effects-and-what-you-can-do-about-them-jws"},"timeToRead":10,"frontmatter":{"date":"26 Sep, 2020","publishedDate":"26 Sep, 2020","updatedDate":"26 Sep, 2020","title":"What are side effects, and what you can do about them","authors":["jmitchell"],"posttags":["javascript","design","functional"],"uid":"1q1kfif1jws"}}}},"staticQueryHashes":["1149526610","1635669961","2756842759","2837448543","3763906766"]}