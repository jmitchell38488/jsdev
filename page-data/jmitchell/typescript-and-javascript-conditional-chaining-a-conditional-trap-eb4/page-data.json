{"componentChunkName":"component---src-templates-blog-post-js","path":"/jmitchell/typescript-and-javascript-conditional-chaining-a-conditional-trap-eb4","result":{"data":{"site":{"siteMetadata":{"title":"JS.dev"}},"allMarkdownRemark":{"nodes":[{"id":"a6493b1a-4cbe-5030-a297-f9047fc45eb4","timeToRead":5,"fields":{"slug":"/jmitchell/typescript-and-javascript-conditional-chaining-a-conditional-trap-eb4"},"html":"<p>An interesting post from Kent Dodds popped up on my twitter feed today, discussing a certain experience he had with one of the JavaScript shortcuts in a production environment, and the result not quite living up to expectation.</p>\n<blockquote class=\"twitter-tweet\" align=\"center\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Use ternaries rather than &amp;&amp; in JSX<br><br>What problems can happen when you use &amp;&amp; to conditionally render content in JSX<a href=\"https://t.co/HXrPy5cyue\">https://t.co/HXrPy5cyue</a> <br><br>Complete with screenshots of a bug I shipped to production at PayPal 🙈<br><br>&quot;You do you, just don&#39;t do bugs&quot;<br><br>🚫🐌🐛🐜🦟🐝🐞🦋🦗🚫</p>&mdash; Kent C. Dodds 🚀 (@kentcdodds) <a href=\"https://twitter.com/kentcdodds/status/1288109405188157450?ref_src=twsrc%5Etfw\">July 28, 2020</a></blockquote>\n\n<p>While he described at length what he encountered, how he resolved it and turned it into a learning opportunity, there was an interesting discussion around optional chaining.</p>\n<h2>What exactly is conditional chaining?</h2>\n<p>The phrase “conditional chaining” is a misnomer used to describe two features - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">optional chaining</a> and <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\">non-null assertion</a> chaining. Both don’t yet exist (optional does) in JavaScript, but can be provided through TypeScript (excluding known compatibility issues with different browsers).</p>\n<p>The use of conditional chaining and non-null assertion chaining is very similar to the way that one would use conditional operators in a branching statement:</p>\n<p><strong>Ternaries:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fooName <span class=\"token operator\">=</span> bar <span class=\"token operator\">&amp;&amp;</span> bar<span class=\"token punctuation\">.</span>name <span class=\"token operator\">?</span> bar<span class=\"token punctuation\">.</span>name <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// union, non-null assertion</span>\n<span class=\"token keyword\">const</span> fooName <span class=\"token operator\">=</span> bar <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> bar <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">:</span> bar<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// intersection, optional assertion</span></code></pre></div>\n<p><strong>Conditional chaining:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> fooName <span class=\"token operator\">=</span> bar<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// non-null assertion</span>\n<span class=\"token keyword\">const</span> fooName <span class=\"token operator\">=</span> bar<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// optional chaining</span></code></pre></div>\n<h2>Ok, so what’s optional chaining?</h2>\n<p>The optional chaining operator (<code class=\"language-text\">?.</code>) permits the deep reading of of properties located within a chain of connected objects, without having the recursively check the existence of the chain of objects before accessing to property.</p>\n<p>Instead of causing an error when the chain encounters a <code class=\"language-text\">nullish</code> reference, the expression shortcuts to return <code class=\"language-text\">undefined</code>.</p>\n<p>Silver bullet? Not exactly. There are still validation checks that are performed by the browser to ensure that the next chained object, or property, immediately following the optional operator exist. Otherwise you run into all sorts of <code class=\"language-text\">undefined</code> shenanigans.</p>\n<p>Take the following code that may be written without optional chaining:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&amp;&amp;</span> foo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>foo <span class=\"token operator\">&amp;&amp;</span> foo<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s introduce optional chaining:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Looks great does it? It’s in the eye of the beholder, because with syntactic sugar like this, you still get drawbacks, such as reduced visibility of non-null assertions during property access, and return types that may be unexpected.</p>\n<h2>Tell me about non-null assertions</h2>\n<p>Just like <code class=\"language-text\">&amp;&amp;</code> and <code class=\"language-text\">||</code> are inverse in conditional branching, <code class=\"language-text\">?.</code> and <code class=\"language-text\">!.</code> are inverse when traversing a chain of references. While optional chaining will return undefined or the value of the final reference, the non-null assertion is a syntactic feature of TypeScript that will assert that a property is non-null during compilation, but will not ensure that it is not non-null at runtime.</p>\n<p>A simple example:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Non-null assertion (property!)</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">fooBar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> fooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> foo<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// s has type 'string'</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Will output name: null</span></code></pre></div>\n<h2>Pitfalls</h2>\n<p>It’s important to note that at the time of writing, non-null assertions are still a feature of TypeScript, and optional chaining has limited browser support.</p>\n<p>It’s always better to err on the side of caution when using syntactic sugar features that aren’t widely supported, even when using a superset of JavaScript such as TypeScript. Take for instance an ES3/ES5 targeted version of the <code class=\"language-text\">?.</code> operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">fooBar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> fooBar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> foo<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> foo <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> foo <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// var s = foo.name; with non-null assertions</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token string\">\"name: \"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Will output name: null</span></code></pre></div>\n<p>The only difference between optional chaining and non-null assertion chaining is that optional chaining in TypeScript will be broken out to validate the individual components, where non-null assertion chaining will remove the operators.</p>\n<p>The compilation of optional chaining becomes a mess with TypeScript the deeper you traverse the reference tree:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> foo<span class=\"token operator\">?.</span>bar<span class=\"token operator\">?.</span>qwerty<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_a <span class=\"token operator\">=</span> foo <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> foo <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> _a <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> _a<span class=\"token punctuation\">.</span>qwerty<span class=\"token punctuation\">;</span></code></pre></div>\n<p>And so on. We can’t reliably use these features natively in JavaScript yet without targeting specific versions of a given browser, but we can use the TypeScript ES target option to generate the next-best use.</p>\n<h2>Should I use conditional chaining</h2>\n<p>This is where objective turns to subjective. First and foremost, it’s syntactic sugar, a shorthand way of checking if a reference exists before accessing it, to avoid the dreaded <code class=\"language-text\">undefined</code> error:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// outputs 'undefined' to the browser console</span></code></pre></div>\n<p>There’s a clear, tangible and measurable benefit for using it, and a reason to use it, however one must consider the use of conditional chaining in traversing data structures, especially when the validation of references has been obfuscated, and the behaviour differs between the operators.</p>\n<p>Non null assertion does not error out, nor is it compiled to validate the truthiness of a reference before accessing it, it simply transforms <code class=\"language-text\">foo!.name</code> into <code class=\"language-text\">foo.name</code> and if it can guess the type that it’s supposed to work with at compilation type, <em>maybe</em> return an error. All of that can be easily voided using <code class=\"language-text\">any</code> even when compiling with <code class=\"language-text\">--strictNullCheck</code>.</p>\n<p>Optional chaining intentionally hides the reference validation from the user, and it’s definitely helpful and useful. But it removes often necessary truthiness checks from code, to replace with a character that can be easily confused or missed, especially given that it’s similar in appearance to a ternary operator, especially a minified instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span>_b<span class=\"token operator\">?</span>_b<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span>b<span class=\"token operator\">?.</span>a<span class=\"token punctuation\">;</span></code></pre></div>\n<p>It’s definitely one to consider before adopting it widescale.</p>","excerpt":"An interesting post from Kent Dodds popped up on my twitter feed today, discussing a certain experience he had with one of…","frontmatter":{"date":"July 29, 2020","publishedDate":"July 29, 2020","title":"TypeScript and JavaScript conditional chaining; a conditional trap?","authors":["jmitchell"],"posttags":["javascript","typescript","functional","tutorial"],"hero":{"childImageSharp":{"fluid":{"src":"/static/e8d324ea57fa293655e9c645e6d442b8/14b42/hero.jpg"}}}}}]}},"pageContext":{"authors":["jmitchell"],"slug":"/jmitchell/typescript-and-javascript-conditional-chaining-a-conditional-trap-eb4","previous":{"id":"4ce0e5b2-9198-5bdf-a044-92744d68bfb5","fields":{"slug":"/jmitchell/practical-examples-for-applying-solid-principles-in-your-react-applications-fb5"},"timeToRead":9,"frontmatter":{"date":"01 Jul, 2020","publishedDate":"01 Jul, 2020","title":"Practical examples for applying SOLID principles in your React applications","authors":["jmitchell"],"posttags":["javascript","react","oop","design"]}},"next":{"id":"7a66e1d3-cbe7-52c5-8eec-107a5ceaed97","fields":{"slug":"/jmitchell/the-file-expertise-levels-of-a-software-developer-the-road-to-zen-master-d97"},"timeToRead":6,"frontmatter":{"date":"01 Aug, 2020","publishedDate":"01 Aug, 2020","title":"The five expertise levels of a software developer; the road to zen master","authors":["jmitchell"],"posttags":["leadership"]}}}},"staticQueryHashes":["1790439409","2358526625","2756842759","3763906766"]}